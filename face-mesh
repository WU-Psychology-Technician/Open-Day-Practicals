import cv2
import mediapipe as mp
import numpy as np
import time

mp_face_mesh = mp.solutions.face_mesh
face_mesh = mp_face_mesh.FaceMesh(
    max_num_faces=1,
    refine_landmarks=True,
    min_detection_confidence=0.6,
    min_tracking_confidence=0.6
)

cap = cv2.VideoCapture(0)

def pulsing_color(base_color=(0,255,0), speed=2):
    t = time.time()*speed
    factor = 0.5 + 0.5*np.sin(t)
    return tuple(int(c*factor) for c in base_color)

while True:
    ret, frame = cap.read()
    if not ret:
        break
    frame = cv2.flip(frame, 1)
    h, w, _ = frame.shape
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = face_mesh.process(rgb_frame)

    overlay = np.zeros_like(frame, dtype=np.uint8)

    if results.multi_face_landmarks:
        for face_landmarks in results.multi_face_landmarks:
            # Get all landmark points
            points = np.array([(int(lm.x*w), int(lm.y*h)) for lm in face_landmarks.landmark])

            # Convex hull around landmarks = smooth face mask
            hull = cv2.convexHull(points)

            # Fill mask with pulsing neon color (transparent)
            mask_color = pulsing_color()
            cv2.fillConvexPoly(overlay, hull, mask_color)

            # Neon outline
            cv2.polylines(overlay, [hull], isClosed=True, color=mask_color, thickness=2)

    # Glow effect
    glow = cv2.GaussianBlur(overlay, (25,25),0)
    frame = cv2.addWeighted(frame, 1, glow, 0.6, 0)
    frame = cv2.addWeighted(frame, 1, overlay, 0.4, 0)

    cv2.imshow("Neon HUD Mask", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
